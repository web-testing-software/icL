%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: icL
file_extensions:
  - icL
scope: source.icL
contexts:
  main:
    - match: \b(if|else|for|filter|range|exists|while|do|any|emit|emiter|slot|assert|listen|wait|jammer|switch|case)\b
      scope: keyword.control.icL

    - match: \b(bool|int|double|string|list|element|set|item|object|function|void|request|char|regex|datetime|any|type)\b
      scope: meta.type.icL

    - match: (\[)(icL|w3c)(\])
      captures:
        1: source.icL
        2: variable.language.icL
        3: source.icL

    - match: \b(icL|Log|Tab|Doc|Import|true|false|Numbers|Types|Key|Alert|By|DSV|Sessions?|Windows?|Cookies?|Tabs?|Files?|Make|Math|Wait|Mouse|Move|Stacks?|States|DB|Query|DBManager|Code|Signal|Datetime)\b
      scope: meta.class.icL

    - match: \'[\w\-\*]+
      scope: variable.other.member.icL

    - match: (\.query)\s*{
      captures:
        1: entity.name.function.icL
      push: sql_code

    - match: \.\w+
      scope: entity.name.function.icL

    - match: \b(Exit|NoSessions|NoSuchWindow|NoSuchElement|NoSuchFrame|NoSuchCookie|NoSuchAlert|NoSuchPlaceholder|NoSuchDatabase|NoSuchServer|WrongUserPassword|StaleElementReference|FolderNotFound|FileNotFound|FieldNotFound|FieldAlreadyExists|OutOfBounds|UnsupportedOperation|EmptyString|EmptyList|MultiList|EmptyElement|MultiElement|EmptySet|MultiSet|InvalidArgument|InvalidSelector|InvalidElementState|InvalidElement|IncompatibleRoot|IncompatibleData|IncompatibleObject|InvalidSessionId|InvalidCookieDomain|InsecureCertificate|UnexpectedAlertOpen|UnrealCast|ParsingFailed|WrongDelimiter|ComplexField|ElementNotInteractable|ElementClickIntercepted|MoveTargetOutOfBounds|UnableToSetCookie|UnableToCaptureScreen|JavascriptError|ScriptTimeout|Timeout|SessionNotCreated|QueryNotExecutedYet|UnknownCommand|UnknownError|UnknownMethod)\b
      scope: entity.name.tag.icL

    - match: \b(css(:all)?|xpath(:all)?|links?(:fragment)?|tags?)(@\w*)?\[
      captures:
        1: entity.name.tag.icL
        2: entity.other.attribute-name.icL
        3: entity.other.attribute-name.icL
        4: entity.other.attribute-name.icL
        5: variable.other
      push: web_element

    - match: (\$(value|run|runAsync))\s*{
      captures:
        1: support.function.icL
      push: js_code

    - match: \$(user|file|always)
      scope: support.function.icL

    - match: \@\w*
      scope: variable.other.icL

    - match: \#\w+
      scope: variable.language.icL

    - match: \#|~
      scope: variable.other.icL

    - match: \:\w+
      scope: entity.other.attribute-name.icL

    - match: \d+(\.\d+)?
      scope: constant.numeric.icL

    - match: (//.*?//|/:.*?:/|/\$.*?\$/|/".*?"/)(\w*)
      captures:
        1: string.regexp.icL
        2: string.quoted.other.icL

    - match: '"'
      scope: punctuation.definition.string.begin.icL
      push: string

    - match: '```'
      scope: punctuation.definition.comment.icL
      set:
        - meta_scope: comment.block.icL
        - match: '```'
          pop: true

    - match: '``'
      scope: punctuation.definition.comment.icL
      set:
        - meta_scope: comment.line.icL
        - match: $
          pop: true

    - match: '`'
      scope: punctuation.definition.comment.icL
      set:
        - meta_scope: comment.line.icL
        - match: $
          pop: true
        - match: '`'
          pop: true

  string:
    - meta_scope: string.quoted.single

    - match: \\.
      scope: constant.character.escape

    - match: '"'
      scope: punctuation.definition.string.end
      pop: true

  sql_code:
    - match: \b(SELECT|FROM|WHERE|LIMIT|INSERT|INTO|VALUE)\b
      scope: keyword.control.icL

    - match: \@:[\w\_]+
      scope: variable.other.icL

    - match: \#:[\w\_]+
      scope: variable.language.icL

    - match: ([\w\_]+)\s*\(
      captures:
        1: entity.name.function.icL

    - match: '}'
      pop: true

  web_element:
    - match: \.[\w\-\_]+
      scope: entity.name.class.icL

    - match: \#[\w\-\_]+
      scope: entity.name.struct.icL

    - match: (\:[\w\-\_]+)\s*\(
      captures:
        1: entity.name.function.icL

    - match: \:[\w\-\_]+
      scope: entity.name.enum.icL

    - match: \b([\w\-\_]+)=[^\w]?([\w\-\_]+)
      captures:
        1: entity.other.attribute-name.icL
        2: string.quoted.single.icL

    - match: \d+
      scope: constant.numeric.icL

    - match: \b[\w\-\_]+\b
      scope: entity.name.type.icL

    - match: '\['
      push: web_element

    - match: '\]'
      pop: true

  js_code:
    - match: \b(abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|eval|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|with|yield)\b
      scope: keyword.control.icL

    - match: \@{[\w\_]+}
      scope: variable.other.icL

    - match: \#{[\w\_]+}
      scope: variable.language.icL

    - match: \!{[\w\_]+}
      scope: entity.name.function.icL

    - match: (\.[\w\_]+)\s*\(
      captures:
        1: entity.name.function.icL

    - match: \.[\w\_]+
      scope: variable.other.member.icL

    - match: \b(window|document|crossfire)\b
      scope: variable.language

    - match: '{'
      push: js_code

    - match: '"'
      push: string

    - match: '}'
      pop: true
