import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump icL.Look 1.0 ./bin/debug/linux/'

Module {
    dependencies: ["QtQuick 2.8"]
    Component { name: "icL::look::BaseLook"; prototype: "QObject" }
    Component {
        name: "icL::look::CentralSide"
        prototype: "icL::look::BaseLook"
        Property { name: "header"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "warn"; type: "icL::look::Issue"; isReadonly: true; isPointer: true }
        Property { name: "error"; type: "icL::look::Issue"; isReadonly: true; isPointer: true }
        Property { name: "undertext"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Property { name: "underdigit"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Property { name: "input"; type: "icL::look::Input"; isReadonly: true; isPointer: true }
        Property { name: "command"; type: "QColor" }
        Property { name: "errorResult"; type: "QColor" }
        Property { name: "okResult"; type: "QColor" }
        Signal {
            name: "commandChanged"
            Parameter { name: "command"; type: "QColor" }
        }
        Signal {
            name: "errorResultChanged"
            Parameter { name: "errorResult"; type: "QColor" }
        }
        Signal {
            name: "okResultChanged"
            Parameter { name: "okResult"; type: "QColor" }
        }
        Signal {
            name: "headerChanged"
            Parameter { name: "header"; type: "TextLook"; isPointer: true }
        }
        Signal {
            name: "warnChanged"
            Parameter { name: "warn"; type: "Issue"; isPointer: true }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "Issue"; isPointer: true }
        }
        Signal {
            name: "undertextChanged"
            Parameter { name: "undertext"; type: "LinkAdv"; isPointer: true }
        }
        Signal {
            name: "underdigitChanged"
            Parameter { name: "underdigit"; type: "LinkAdv"; isPointer: true }
        }
        Signal {
            name: "inputChanged"
            Parameter { name: "input"; type: "Input"; isPointer: true }
        }
        Method {
            name: "setCommand"
            Parameter { name: "command"; type: "QColor" }
        }
        Method {
            name: "setErrorResult"
            Parameter { name: "errorResult"; type: "QColor" }
        }
        Method {
            name: "setOkResult"
            Parameter { name: "okResult"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::CharFormat"
        prototype: "icL::look::CharFormatBase"
        Property { name: "underline"; type: "int" }
        Property { name: "undercolor"; type: "QColor" }
        Signal {
            name: "underlineChanged"
            Parameter { name: "underline"; type: "int" }
        }
        Signal {
            name: "undercolorChanged"
            Parameter { name: "undercolor"; type: "QColor" }
        }
        Method {
            name: "setUnderline"
            Parameter { name: "underline"; type: "int" }
        }
        Method {
            name: "setUndercolor"
            Parameter { name: "undercolor"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::CharFormatBase"
        prototype: "icL::look::TextLook"
        Property { name: "bold"; type: "bool" }
        Property { name: "italic"; type: "bool" }
        Signal {
            name: "boldChanged"
            Parameter { name: "bold"; type: "bool" }
        }
        Signal {
            name: "italicChanged"
            Parameter { name: "italic"; type: "bool" }
        }
        Method {
            name: "setBold"
            Parameter { name: "bold"; type: "bool" }
        }
        Method {
            name: "setItalic"
            Parameter { name: "italic"; type: "bool" }
        }
    }
    Component {
        name: "icL::look::Editor"
        prototype: "icL::look::BaseLook"
        Property { name: "text"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "selection"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "number"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "string"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "type"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "local"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "global"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "property"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "method"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "function"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "keyword"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "comment"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "system"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "error"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "warning"; type: "icL::look::CharFormat"; isReadonly: true; isPointer: true }
        Property { name: "occurrence"; type: "icL::look::Highlight"; isReadonly: true; isPointer: true }
        Property { name: "current"; type: "icL::look::Line"; isReadonly: true; isPointer: true }
        Property { name: "debug"; type: "icL::look::Line"; isReadonly: true; isPointer: true }
        Property { name: "breakpoint"; type: "icL::look::Line"; isReadonly: true; isPointer: true }
        Signal {
            name: "textChanged"
            Parameter { name: "text"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "selectionChanged"
            Parameter { name: "selection"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "numberChanged"
            Parameter { name: "number"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "stringChanged"
            Parameter { name: "string"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "localChanged"
            Parameter { name: "local"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "globalChanged"
            Parameter { name: "global"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "propertyChanged"
            Parameter { name: "property"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "methodChanged"
            Parameter { name: "method"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "functionChanged"
            Parameter { name: "function"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "keywordChanged"
            Parameter { name: "keyword"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "commentChanged"
            Parameter { name: "comment"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "systemChanged"
            Parameter { name: "system"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "warningChanged"
            Parameter { name: "warning"; type: "CharFormat"; isPointer: true }
        }
        Signal {
            name: "occurrenceChanged"
            Parameter { name: "occurrence"; type: "Highlight"; isPointer: true }
        }
        Signal {
            name: "currentChanged"
            Parameter { name: "current"; type: "Line"; isPointer: true }
        }
        Signal {
            name: "debugChanged"
            Parameter { name: "debug"; type: "Line"; isPointer: true }
        }
        Signal {
            name: "breakpointChanged"
            Parameter { name: "breakpoint"; type: "Line"; isPointer: true }
        }
        Method { name: "updateOccurrence" }
        Method { name: "updateNumber" }
        Method { name: "updateString" }
        Method { name: "updateType" }
        Method { name: "updateLocal" }
        Method { name: "updateGlobal" }
        Method { name: "updateProperty" }
        Method { name: "updateMethod" }
        Method { name: "updateFunction" }
        Method { name: "updateKeyword" }
        Method { name: "updateComment" }
        Method { name: "updateSystem" }
        Method { name: "updateError" }
        Method { name: "updateWarning" }
    }
    Component {
        name: "icL::look::Effect"
        prototype: "icL::look::BaseLook"
        Property { name: "normal"; type: "QColor" }
        Property { name: "hover"; type: "QColor" }
        Property { name: "active"; type: "QColor" }
        Signal {
            name: "normalChanged"
            Parameter { name: "normal"; type: "QColor" }
        }
        Signal {
            name: "hoverChanged"
            Parameter { name: "hover"; type: "QColor" }
        }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "QColor" }
        }
        Method {
            name: "setNormal"
            Parameter { name: "normal"; type: "QColor" }
        }
        Method {
            name: "setHover"
            Parameter { name: "hover"; type: "QColor" }
        }
        Method {
            name: "setActive"
            Parameter { name: "active"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::EffectAdv"
        prototype: "icL::look::Effect"
        Property { name: "activeHover"; type: "QColor" }
        Signal {
            name: "activeHoverChanged"
            Parameter { name: "activeHover"; type: "QColor" }
        }
        Method {
            name: "setActiveHover"
            Parameter { name: "activeHover"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::Floating"
        prototype: "icL::look::BaseLook"
        Property { name: "header"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "stack"; type: "icL::look::Tree"; isReadonly: true; isPointer: true }
        Property { name: "state"; type: "icL::look::Tree"; isReadonly: true; isPointer: true }
        Property { name: "input"; type: "icL::look::Input"; isReadonly: true; isPointer: true }
        Property { name: "error"; type: "QColor" }
        Property { name: "warn"; type: "QColor" }
        Property { name: "console"; type: "QColor" }
        Property { name: "bg"; type: "QColor" }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "QColor" }
        }
        Signal {
            name: "warnChanged"
            Parameter { name: "warn"; type: "QColor" }
        }
        Signal {
            name: "consoleChanged"
            Parameter { name: "console"; type: "QColor" }
        }
        Signal {
            name: "bgChanged"
            Parameter { name: "bg"; type: "QColor" }
        }
        Signal {
            name: "headerChanged"
            Parameter { name: "header"; type: "TextLook"; isPointer: true }
        }
        Signal {
            name: "stackChanged"
            Parameter { name: "stack"; type: "Tree"; isPointer: true }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "Tree"; isPointer: true }
        }
        Signal {
            name: "inputChanged"
            Parameter { name: "input"; type: "Input"; isPointer: true }
        }
        Method {
            name: "setError"
            Parameter { name: "error"; type: "QColor" }
        }
        Method {
            name: "setWarn"
            Parameter { name: "warn"; type: "QColor" }
        }
        Method {
            name: "setConsole"
            Parameter { name: "console"; type: "QColor" }
        }
        Method {
            name: "setBg"
            Parameter { name: "bg"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::Highlight"
        prototype: "icL::look::BaseLook"
        Property { name: "background"; type: "QColor" }
        Property { name: "border"; type: "QColor" }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "QColor" }
        }
        Signal {
            name: "borderChanged"
            Parameter { name: "border"; type: "QColor" }
        }
        Method {
            name: "setBackground"
            Parameter { name: "background"; type: "QColor" }
        }
        Method {
            name: "setBorder"
            Parameter { name: "border"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::Input"
        prototype: "icL::look::Link"
        Property { name: "inactive"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "selection"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "cursor"; type: "QColor" }
        Signal {
            name: "cursorChanged"
            Parameter { name: "cursor"; type: "QColor" }
        }
        Signal {
            name: "inactiveChanged"
            Parameter { name: "inactive"; type: "TextLook"; isPointer: true }
        }
        Signal {
            name: "selectionChanged"
            Parameter { name: "selection"; type: "TextLook"; isPointer: true }
        }
        Method {
            name: "setCursor"
            Parameter { name: "cursor"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::Issue"
        prototype: "icL::look::LinkAdv"
        Property { name: "effect"; type: "icL::look::Effect"; isReadonly: true; isPointer: true }
        Signal {
            name: "effectChanged"
            Parameter { name: "effect"; type: "Effect"; isPointer: true }
        }
    }
    Component {
        name: "icL::look::LeftSide"
        prototype: "icL::look::BaseLook"
        Property { name: "switcher"; type: "icL::look::Link"; isReadonly: true; isPointer: true }
        Property { name: "projects"; type: "icL::look::Tree"; isReadonly: true; isPointer: true }
        Property { name: "files"; type: "icL::look::ListItem"; isReadonly: true; isPointer: true }
        Signal {
            name: "switcherChanged"
            Parameter { name: "switcher"; type: "Link"; isPointer: true }
        }
        Signal {
            name: "projectsChanged"
            Parameter { name: "projects"; type: "Tree"; isPointer: true }
        }
        Signal {
            name: "filesChanged"
            Parameter { name: "files"; type: "ListItem"; isPointer: true }
        }
    }
    Component {
        name: "icL::look::Line"
        prototype: "icL::look::BaseLook"
        Property { name: "lineBg"; type: "QColor" }
        Property {
            name: "lineNumber"
            type: "icL::look::CharFormatBase"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "lineBgChanged"
            Parameter { name: "lineBg"; type: "QColor" }
        }
        Signal {
            name: "lineNumberChanged"
            Parameter { name: "lineNumber"; type: "CharFormatBase"; isPointer: true }
        }
        Method {
            name: "setLineBg"
            Parameter { name: "lineBg"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::Link"
        prototype: "icL::look::BaseLook"
        Property { name: "normal"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "hover"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "active"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Signal {
            name: "normalChanged"
            Parameter { name: "normal"; type: "TextLook"; isPointer: true }
        }
        Signal {
            name: "hoverChganged"
            Parameter { name: "hover"; type: "TextLook"; isPointer: true }
        }
        Signal {
            name: "activeChanged"
            Parameter { name: "active"; type: "TextLook"; isPointer: true }
        }
    }
    Component {
        name: "icL::look::LinkAdv"
        prototype: "icL::look::Link"
        Property { name: "activeHover"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Signal {
            name: "activeHoverChanged"
            Parameter { name: "activeHover"; type: "TextLook"; isPointer: true }
        }
    }
    Component {
        name: "icL::look::ListItem"
        prototype: "icL::look::Link"
        Property { name: "border"; type: "icL::look::Effect"; isReadonly: true; isPointer: true }
        Signal {
            name: "borderChanged"
            Parameter { name: "border"; type: "Effect"; isPointer: true }
        }
    }
    Component {
        name: "icL::look::Look"
        prototype: "icL::look::BaseLook"
        exports: ["Look 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "start"; type: "icL::look::StartWindow"; isReadonly: true; isPointer: true }
        Property { name: "session"; type: "icL::look::SessionWindow"; isReadonly: true; isPointer: true }
        Property { name: "editor"; type: "icL::look::Editor"; isReadonly: true; isPointer: true }
        Property { name: "path"; type: "string" }
        Signal {
            name: "startChanged"
            Parameter { name: "start"; type: "StartWindow"; isPointer: true }
        }
        Signal {
            name: "sessionChanged"
            Parameter { name: "session"; type: "SessionWindow"; isPointer: true }
        }
        Signal {
            name: "editorChanged"
            Parameter { name: "editor"; type: "Editor"; isPointer: true }
        }
        Signal {
            name: "pathChanged"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "setPath"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "loadConf"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "editorOnly"; type: "bool" }
        }
        Method {
            name: "saveConf"
            type: "bool"
            Parameter { name: "editorOnly"; type: "bool" }
        }
    }
    Component {
        name: "icL::look::SessionWindow"
        prototype: "icL::look::BaseLook"
        Property { name: "center"; type: "icL::look::CentralSide"; isReadonly: true; isPointer: true }
        Property { name: "floating"; type: "icL::look::Floating"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "icL::look::LeftSide"; isReadonly: true; isPointer: true }
        Property { name: "top"; type: "icL::look::TopBar"; isReadonly: true; isPointer: true }
        Property { name: "main"; type: "icL::look::Static"; isReadonly: true; isPointer: true }
        Signal {
            name: "centerChanged"
            Parameter { name: "center"; type: "CentralSide"; isPointer: true }
        }
        Signal {
            name: "floatingChanged"
            Parameter { name: "floating"; type: "Floating"; isPointer: true }
        }
        Signal {
            name: "leftChanged"
            Parameter { name: "left"; type: "LeftSide"; isPointer: true }
        }
        Signal {
            name: "topChanged"
            Parameter { name: "top"; type: "TopBar"; isPointer: true }
        }
        Signal {
            name: "mainChanged"
            Parameter { name: "main"; type: "Static"; isPointer: true }
        }
    }
    Component {
        name: "icL::look::Side"
        prototype: "icL::look::ListItem"
        Property { name: "background"; type: "QColor" }
        Property { name: "header"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "input"; type: "icL::look::Input"; isReadonly: true; isPointer: true }
        Property { name: "button"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "QColor" }
        }
        Signal {
            name: "headerChanged"
            Parameter { name: "header"; type: "TextLook"; isPointer: true }
        }
        Signal {
            name: "inputChanged"
            Parameter { name: "input"; type: "Input"; isPointer: true }
        }
        Signal {
            name: "buttonChanged"
            Parameter { name: "button"; type: "LinkAdv"; isPointer: true }
        }
        Method {
            name: "setBackground"
            Parameter { name: "background"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::StartWindow"
        prototype: "icL::look::BaseLook"
        Property { name: "header"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "icL::look::Side"; isReadonly: true; isPointer: true }
        Property { name: "right"; type: "icL::look::Side"; isReadonly: true; isPointer: true }
        Property { name: "underline"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Signal {
            name: "underlineChanged"
            Parameter { name: "underline"; type: "TextLook"; isPointer: true }
        }
        Signal {
            name: "rightChanged"
            Parameter { name: "right"; type: "Side"; isPointer: true }
        }
        Signal {
            name: "leftChanged"
            Parameter { name: "left"; type: "Side"; isPointer: true }
        }
        Signal {
            name: "headerChanged"
            Parameter { name: "header"; type: "TextLook"; isPointer: true }
        }
    }
    Component {
        name: "icL::look::Static"
        prototype: "icL::look::BaseLook"
        Property { name: "menuItem"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Property { name: "submenuItem"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Property {
            name: "submenuBorder"
            type: "icL::look::EffectAdv"
            isReadonly: true
            isPointer: true
        }
        Property { name: "button"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Property { name: "background"; type: "QColor" }
        Property { name: "handle"; type: "QColor" }
        Property { name: "handleVisible"; type: "QColor" }
        Property { name: "handleHidden"; type: "QColor" }
        Property { name: "menuShadow"; type: "QColor" }
        Property { name: "submenuShadow"; type: "QColor" }
        Signal {
            name: "menuItemChanged"
            Parameter { name: "menuItem"; type: "LinkAdv"; isPointer: true }
        }
        Signal {
            name: "submenuItemChanged"
            Parameter { name: "submenuItem"; type: "LinkAdv"; isPointer: true }
        }
        Signal {
            name: "submenuBorderChanged"
            Parameter { name: "submenuBorder"; type: "EffectAdv"; isPointer: true }
        }
        Signal {
            name: "buttonChanged"
            Parameter { name: "button"; type: "LinkAdv"; isPointer: true }
        }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "QColor" }
        }
        Signal {
            name: "handleChanged"
            Parameter { name: "handle"; type: "QColor" }
        }
        Signal {
            name: "handleVisibleChanged"
            Parameter { name: "handleVisible"; type: "QColor" }
        }
        Signal {
            name: "handleHiddenChanged"
            Parameter { name: "handleHidden"; type: "QColor" }
        }
        Signal {
            name: "menuShadowChanged"
            Parameter { name: "menuShadow"; type: "QColor" }
        }
        Signal {
            name: "submenuShadowChanged"
            Parameter { name: "submenuShadow"; type: "QColor" }
        }
        Method {
            name: "setBackground"
            Parameter { name: "background"; type: "QColor" }
        }
        Method {
            name: "setHandle"
            Parameter { name: "handle"; type: "QColor" }
        }
        Method {
            name: "setHandleVisible"
            Parameter { name: "handleVisible"; type: "QColor" }
        }
        Method {
            name: "setHandleHidden"
            Parameter { name: "handleHidden"; type: "QColor" }
        }
        Method {
            name: "setMenuShadow"
            Parameter { name: "menuShadow"; type: "QColor" }
        }
        Method {
            name: "setSubmenuShadow"
            Parameter { name: "submenuShadow"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::TextLook"
        prototype: "icL::look::BaseLook"
        Property { name: "background"; type: "QColor" }
        Property { name: "foreground"; type: "QColor" }
        Signal {
            name: "backgroundChanged"
            Parameter { name: "background"; type: "QColor" }
        }
        Signal {
            name: "foregroundChanged"
            Parameter { name: "foreground"; type: "QColor" }
        }
        Method {
            name: "setBackground"
            Parameter { name: "background"; type: "QColor" }
        }
        Method {
            name: "setForeground"
            Parameter { name: "foreground"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::TopBar"
        prototype: "icL::look::BaseLook"
        Property { name: "tab"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Property { name: "url"; type: "icL::look::LinkAdv"; isReadonly: true; isPointer: true }
        Property { name: "button"; type: "icL::look::EffectAdv"; isReadonly: true; isPointer: true }
        Property { name: "tool"; type: "icL::look::EffectAdv"; isReadonly: true; isPointer: true }
        Property { name: "input"; type: "icL::look::TextLook"; isReadonly: true; isPointer: true }
        Property { name: "cursor"; type: "QColor" }
        Signal {
            name: "cursorChanged"
            Parameter { name: "cursor"; type: "QColor" }
        }
        Signal {
            name: "tabChanged"
            Parameter { name: "tab"; type: "LinkAdv"; isPointer: true }
        }
        Signal {
            name: "urlChanged"
            Parameter { name: "url"; type: "LinkAdv"; isPointer: true }
        }
        Signal {
            name: "buttonChanged"
            Parameter { name: "button"; type: "EffectAdv"; isPointer: true }
        }
        Signal {
            name: "toolChanged"
            Parameter { name: "tool"; type: "EffectAdv"; isPointer: true }
        }
        Signal {
            name: "inputChanged"
            Parameter { name: "input"; type: "TextLook"; isPointer: true }
        }
        Method {
            name: "setCursor"
            Parameter { name: "cursor"; type: "QColor" }
        }
    }
    Component {
        name: "icL::look::Tree"
        prototype: "icL::look::BaseLook"
        Property { name: "parent"; type: "icL::look::Link"; isReadonly: true; isPointer: true }
        Property { name: "child"; type: "icL::look::Link"; isReadonly: true; isPointer: true }
        Signal {
            name: "parentChanged"
            Parameter { name: "parent"; type: "Link"; isPointer: true }
        }
        Signal {
            name: "childChanged"
            Parameter { name: "child"; type: "Link"; isPointer: true }
        }
    }
}
